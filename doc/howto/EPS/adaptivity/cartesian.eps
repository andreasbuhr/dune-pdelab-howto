%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GPL Ghostscript 871 (pswrite)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 241 89
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq pdfPatternCS not and {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne pdfPatternCS or {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
q
0 0 2409 890 re
W
16 w
4 M
/DeviceGray {} CS
[0] SC
240 560.113 720 320 re
S
240 240.113 720 320 re
S
960 240.113 720 320 re
S
960 560.113 720 320 re
S
1680 560.113 720 320 re
S
1680 240.113 720 320 re
S
/DeviceGray {} cs
[0] sc
0 i
608 71 m
598.18 71 l
590.211 71 584.691 70.0312 581.609 68.0898 c
578.539 66.1484 577 62.8398 577 58.1602 c
577 54.4297 578.148 51.4688 580.461 49.2891 c
582.762 47.1016 585.898 46.0117 589.871 46.0117 c
595.34 46.0117 599.73 48.0703 603.031 52.1992 c
606.34 56.3281 608 61.8203 608 68.6719 c
608 71 l
h
618 74.9102 m
618 39.6016 l
608 39.6016 l
608 48.9883 l
605.73 45.2305 602.922 42.4609 599.551 40.6719 c
596.18 38.8789 592.051 37.9883 587.18 37.9883 c
581.012 37.9883 576.109 39.7812 572.469 43.3711 c
568.828 46.9492 567.012 51.75 567.012 57.7695 c
567.012 64.7891 569.281 70.0781 573.809 73.6484 c
578.352 77.2188 585.109 79 594.121 79 c
608.012 79 l
608.012 79.9492 l
608.012 84.4219 606.488 87.8789 603.48 90.3281 c
600.469 92.7812 596.238 94 590.801 94 c
587.34 94 583.969 93.6016 580.691 92.7891 c
577.41 91.9883 574.25 90.7812 571.23 89.1719 c
571.23 98.6484 l
574.871 100.102 578.41 101.191 581.84 101.91 c
585.27 102.641 588.609 103 591.859 103 c
600.629 103 607.18 100.672 611.512 96.0195 c
615.84 91.3789 618.02 84.3398 618.02 74.9102 c
f
8 w
1 i
240 160.109 m
240 0.109375 l
S
960 160.109 m
960 0.109375 l
S
1680 160.109 m
1680 0.109375 l
S
2400 160.109 m
2400 0.109375 l
S
160 240.109 m
0 240.109 l
S
160 560.109 m
0 560.109 l
S
160 880.109 m
0 880.109 l
S
80 320.109 m
80 240.109 l
S
99.3789 281.949 m
80.0781 229.531 l
60.7812 281.949 l
72.1914 273.59 87.7695 273.629 99.3789 281.949 c
f*
80 640.109 m
80 560.109 l
S
99.3789 601.949 m
80.0781 549.531 l
60.7812 601.949 l
72.1914 593.59 87.7695 593.629 99.3789 601.949 c
f*
80 480.109 m
80 560.109 l
S
60.6211 518.238 m
79.9219 570.699 l
99.2188 518.238 l
87.8086 526.629 72.2305 526.602 60.6211 518.238 c
f*
80 800.109 m
80 880.109 l
S
60.6211 838.238 m
79.9219 890.699 l
99.2188 838.238 l
87.8086 846.629 72.2305 846.602 60.6211 838.238 c
f*
520 80.1094 m
243.359 76.8711 l
S
285.43 58 m
232.77 76.6719 l
285 96.5586 l
276.762 85.1094 276.988 69.5312 285.43 58 c
f*
680 80.1094 m
956.801 76.7109 l
S
915.16 96.6016 m
967.379 76.6719 l
914.691 58.0391 l
923.199 69.3281 923.359 84.8789 915.16 96.6016 c
f*
1240 80.1094 m
963.359 76.8711 l
S
1005.43 58 m
952.77 76.6719 l
1005 96.5586 l
996.762 85.1094 996.988 69.5312 1005.43 58 c
f*
1400 80.1094 m
1676.8 76.7109 l
S
1635.16 96.6016 m
1687.38 76.6719 l
1634.69 58.0391 l
1643.2 69.3281 1643.36 84.8789 1635.16 96.6016 c
f*
1960 80.1094 m
1683.36 76.8711 l
S
1725.43 58 m
1672.77 76.6719 l
1725 96.5586 l
1716.76 85.1094 1716.99 69.5312 1725.43 58 c
f*
2120 80.1094 m
2396.8 76.7109 l
S
2355.16 96.6016 m
2407.38 76.6719 l
2354.69 58.0391 l
2363.2 69.3281 2363.36 84.8789 2355.16 96.6016 c
f*
0 i
1328 71 m
1318.18 71 l
1310.21 71 1304.69 70.0195 1301.61 68.0781 c
1298.54 66.1406 1297 62.8281 1297 58.1484 c
1297 54.4219 1298.15 51.4609 1300.46 49.2812 c
1302.76 47.0898 1305.9 46 1309.87 46 c
1315.34 46 1319.73 48.0586 1323.03 52.1914 c
1326.34 56.3203 1328 61.8086 1328 68.6484 c
1328 71 l
h
1338 74.9102 m
1338 39.6016 l
1328 39.6016 l
1328 48.9883 l
1325.73 45.2305 1322.92 42.4609 1319.55 40.6719 c
1316.18 38.8789 1312.05 37.9883 1307.18 37.9883 c
1301.01 37.9883 1296.11 39.7812 1292.47 43.3711 c
1288.83 46.9492 1287.01 51.75 1287.01 57.7695 c
1287.01 64.7891 1289.28 70.0781 1293.81 73.6484 c
1298.35 77.2188 1305.11 79 1314.12 79 c
1328.01 79 l
1328.01 79.9492 l
1328.01 84.4219 1326.49 87.8789 1323.48 90.3281 c
1320.47 92.7812 1316.24 94 1310.8 94 c
1307.34 94 1303.97 93.6016 1300.69 92.7891 c
1297.41 91.9883 1294.25 90.7812 1291.23 89.1719 c
1291.23 98.6484 l
1294.87 100.102 1298.41 101.191 1301.84 101.91 c
1305.27 102.641 1308.61 103 1311.86 103 c
1320.63 103 1327.18 100.672 1331.51 96.0195 c
1335.84 91.3789 1338.02 84.3398 1338.02 74.9102 c
f
2048 71 m
2038.18 71 l
2030.21 71 2024.69 70.0195 2021.61 68.0781 c
2018.54 66.1406 2017 62.8281 2017 58.1484 c
2017 54.4219 2018.15 51.4609 2020.46 49.2812 c
2022.76 47.0898 2025.9 46 2029.87 46 c
2035.34 46 2039.73 48.0586 2043.03 52.1914 c
2046.34 56.3203 2048 61.8086 2048 68.6484 c
2048 71 l
h
2058 74.9102 m
2058 39.6016 l
2048 39.6016 l
2048 48.9883 l
2045.73 45.2305 2042.92 42.4609 2039.55 40.6719 c
2036.18 38.8789 2032.05 37.9883 2027.18 37.9883 c
2021.01 37.9883 2016.11 39.7812 2012.47 43.3711 c
2008.83 46.9492 2007.01 51.75 2007.01 57.7695 c
2007.01 64.7891 2009.28 70.0781 2013.81 73.6484 c
2018.35 77.2188 2025.11 79 2034.12 79 c
2048.01 79 l
2048.01 79.9492 l
2048.01 84.4219 2046.49 87.8789 2043.48 90.3281 c
2040.47 92.7812 2036.24 94 2030.8 94 c
2027.34 94 2023.97 93.6016 2020.69 92.7891 c
2017.41 91.9883 2014.25 90.7812 2011.23 89.1719 c
2011.23 98.6484 l
2014.87 100.102 2018.41 101.191 2021.84 101.91 c
2025.27 102.641 2028.61 103 2031.86 103 c
2040.63 103 2047.18 100.672 2051.51 96.0195 c
2055.84 91.3789 2058.02 84.3398 2058.02 74.9102 c
f
95 390.5 m
95 398.141 93.4414 404.129 90.3281 408.48 c
87.2188 412.82 82.9414 415 77.5 415 c
72.0508 415 67.7812 412.82 64.6719 408.48 c
61.5586 404.129 60 398.141 60 390.5 c
60 382.859 61.5508 376.871 64.6719 372.52 c
67.7812 368.172 72.0586 366 77.5 366 c
82.9414 366 87.2109 368.172 90.3281 372.52 c
93.4414 376.871 95 382.859 95 390.5 c
h
60 445.09 m
60 411.949 l
62.1289 415.691 64.8203 418.461 68.0703 420.27 c
71.3203 422.078 75.1992 422.988 79.7188 422.988 c
87.2109 422.988 93.2891 419.988 97.9688 414.031 c
102.648 408.059 105 400.211 105 390.488 c
105 380.762 102.66 372.922 97.9688 366.949 c
93.2891 360.98 87.1992 358 79.7188 358 c
75.1992 358 71.3203 358.891 68.0703 360.66 c
64.8203 362.441 62.1289 365.16 60 368.82 c
60 359.59 l
50 359.59 l
50 445.09 l
f
95 710.5 m
95 718.141 93.4414 724.129 90.3281 728.48 c
87.2188 732.82 82.9414 735 77.5 735 c
72.0508 735 67.7812 732.82 64.6719 728.48 c
61.5586 724.129 60 718.141 60 710.5 c
60 702.859 61.5508 696.871 64.6719 692.52 c
67.7812 688.172 72.0586 686 77.5 686 c
82.9414 686 87.2109 688.172 90.3281 692.52 c
93.4414 696.871 95 702.859 95 710.5 c
h
60 765.09 m
60 731.949 l
62.1289 735.691 64.8203 738.461 68.0703 740.27 c
71.3203 742.078 75.1992 742.988 79.7188 742.988 c
87.2109 742.988 93.2891 739.988 97.9688 734.031 c
102.648 728.059 105 720.211 105 710.488 c
105 700.762 102.66 692.922 97.9688 686.949 c
93.2891 680.98 87.1992 678 79.7188 678 c
75.1992 678 71.3203 678.891 68.0703 680.66 c
64.8203 682.441 62.1289 685.16 60 688.82 c
60 679.59 l
50 679.59 l
50 765.09 l
f
Q
/DeviceGray {} cs
[0] sc
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
